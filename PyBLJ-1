from __future__ import division
import datetime
import copy
import sys,os,re
import subprocess as sp
import numpy as np
import fileinput
import math
from decimal import Decimal
import time
from scipy import stats
from scipy.optimize import curve_fit
from scipy.optimize import leastsq
from scipy.optimize import minimize
import pickle
import os.path
import scipy
from scipy import spatial
### MAKE SURE TEST.FCHK IS IN YOUR WORKING DIRECTORY!!!!###
lg = np.loadtxt('lebded') #READ IN LEBDEVED FILE AND PARSE IT
it = int(lg[0][0])
pts = np.zeros([it, 3])
dtr = np.zeros([it, 2])
wt = np.zeros([it])
for i in range(it):
    dtr[i,0] = (3.14159/180)*lg[i+1,0]
    dtr[i,1] = (3.14159/180)*lg[i+1,1]
    wt[i]=lg[i+1,2]   

r = [] #EMPTY ARRAY FOR RADII OF RADIAL GRIDS
for i in range(240):
    if i < 30:
      r.append((i*0.05)+0.05)
    else:
      r.append((i*0.05)+0.05)
sp.call('more Test.FChk | grep "Number of atoms" | awk \'{print $5}\' > j.dat', shell = True)
num = np.loadtxt('j.dat')
num = int(num)


b = []
c = []
rown = math.ceil(num/6)
rown = int(rown)

sp.call('more Test.FChk | grep -A '+str(rown)+' Atomic | awk \'FNR > 1 {print}\' > c.dat', shell = True) #GRAB TEST.FCHK, PARSE
with open("c.dat") as f:
    for line in f:
        numbers_str = line.split()
        for i in range(len(numbers_str)):
            c.append(numbers_str[i])


g = int(math.ceil((num*3)/5))
sp.call('more Test.FChk | grep -A '+str(g)+' Current | awk \'FNR > 1 {print}\' > b.dat', shell = True) #MORE PARSING OF TEST.FCHK
with open("b.dat") as f:
    for line in f:
        numbers_str = line.split()
        for i in range(len(numbers_str)):
            b.append(numbers_str[i])




file = open("inputfile.in", "w")
file.write("0\n")
file.write("0\n")
file.write(str(int(num))+"\n")
for i in range(num):
    file.write(str(b[i*3+0])+" ")
    file.write(str(b[i*3+1])+" ")
    file.write(str(b[i*3+2])+" \n")
for i in range(num):
    file.write(str(c[i])+"\n")
    
file.close()

nelec = []
xpos = []
ypos = []
zpos = []

for i in range(num):
 sp.call('awk \'FNR == '+str(4+num+i)+'{print $1}\' inputfile.in > c.dat', shell = True)
 vv = np.loadtxt('c.dat')
 nelec.append(vv)
 sp.call('awk \'FNR == '+str(4+i)+'{print $1}\' inputfile.in > c.dat', shell = True)
 vv = np.loadtxt('c.dat')
 xpos.append(vv)
 sp.call('awk \'FNR == '+str(4+i)+'{print $2}\' inputfile.in > c.dat', shell = True)
 vv = np.loadtxt('c.dat')
 ypos.append(vv)
 sp.call('awk \'FNR == '+str(4+i)+'{print $3}\' inputfile.in > c.dat', shell = True)
 vv = np.loadtxt('c.dat')
 zpos.append(vv)

file = open("alden.sh", "w")
file.write("module load gaussian\n")
file.write("cd TMP\n")
for i in range(num):
    file.write("cubegen 0 FDensity=SCF Test.FChk al"+str(i+1)+".den -5 < grid"+str(i+1)+"\n")
file.close()
sp.call('chmod u+x alden.sh', shell = True)
q = []

for k in range(num): #CREATE GRID FILES FOR EACH ATOM
    for j in range(len(r)):
        for i in range(it):
            pts[i,0] = np.cos(dtr[i,0])*np.sin(dtr[i,1])*r[j]
            q.append(pts[i,0])
            pts[i,1] = np.sin(dtr[i,0])*np.sin(dtr[i,1])*r[j]
            q.append(pts[i,1])
            pts[i,2] = np.cos(dtr[i,1])*r[j]
            q.append(pts[i,2])
            f = open("grid"+str(k+1), 'a')
            f.write(str((pts[i,0]+xpos[k])*0.529177) + ' ')
            f.write(str((pts[i,1]+ypos[k])*0.529177) + ' ')
            f.write(str((pts[i,2]+zpos[k])*0.529177) + '\n')
            f.flush()
            
##EXECUTE ALDEN.SH IN DIRECTORY WITH TEST.FCHK + GRID FILES + G09 INSTALLED BEFORE PROCEEDING
